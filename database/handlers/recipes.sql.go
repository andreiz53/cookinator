// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: recipes.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (
    name,
    cooking_process,
    family_id,
    items
) VALUES (
    $1, $2, $3, $4
) RETURNING id, created_at, updated_at, name, cooking_process, family_id, items
`

type CreateRecipeParams struct {
	Name           string    `json:"name"`
	CookingProcess string    `json:"cooking_process"`
	FamilyID       uuid.UUID `json:"family_id"`
	Items          []byte    `json:"items"`
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRow(ctx, createRecipe,
		arg.Name,
		arg.CookingProcess,
		arg.FamilyID,
		arg.Items,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.CookingProcess,
		&i.FamilyID,
		&i.Items,
	)
	return i, err
}

const deleteRecipe = `-- name: DeleteRecipe :exec
DELETE FROM recipes
WHERE id = $1
`

func (q *Queries) DeleteRecipe(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRecipe, id)
	return err
}

const getRecipeByID = `-- name: GetRecipeByID :one
SELECT id, created_at, updated_at, name, cooking_process, family_id, items FROM recipes
WHERE id = $1
`

func (q *Queries) GetRecipeByID(ctx context.Context, id uuid.UUID) (Recipe, error) {
	row := q.db.QueryRow(ctx, getRecipeByID, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.CookingProcess,
		&i.FamilyID,
		&i.Items,
	)
	return i, err
}

const getRecipes = `-- name: GetRecipes :many
SELECT id, created_at, updated_at, name, cooking_process, family_id, items FROM recipes
`

func (q *Queries) GetRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.Query(ctx, getRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.CookingProcess,
			&i.FamilyID,
			&i.Items,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipesByFamilyID = `-- name: GetRecipesByFamilyID :many
SELECT id, created_at, updated_at, name, cooking_process, family_id, items FROM recipes
WHERE family_id = $1
`

func (q *Queries) GetRecipesByFamilyID(ctx context.Context, familyID uuid.UUID) ([]Recipe, error) {
	rows, err := q.db.Query(ctx, getRecipesByFamilyID, familyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.CookingProcess,
			&i.FamilyID,
			&i.Items,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipe = `-- name: UpdateRecipe :one
UPDATE recipes SET
    name = $2,
    cooking_process = $3,
    items = $4
WHERE id = $1
RETURNING id, created_at, updated_at, name, cooking_process, family_id, items
`

type UpdateRecipeParams struct {
	ID             uuid.UUID `json:"id"`
	Name           string    `json:"name"`
	CookingProcess string    `json:"cooking_process"`
	Items          []byte    `json:"items"`
}

func (q *Queries) UpdateRecipe(ctx context.Context, arg UpdateRecipeParams) (Recipe, error) {
	row := q.db.QueryRow(ctx, updateRecipe,
		arg.ID,
		arg.Name,
		arg.CookingProcess,
		arg.Items,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.CookingProcess,
		&i.FamilyID,
		&i.Items,
	)
	return i, err
}
