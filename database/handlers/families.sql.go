// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: families.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFamily = `-- name: CreateFamily :one
INSERT INTO families (
    name,
    created_by_user_id
) VALUES ( $1, $2 )
RETURNING id, created_at, updated_at, name, created_by_user_id
`

type CreateFamilyParams struct {
	Name            string
	CreatedByUserID pgtype.UUID
}

func (q *Queries) CreateFamily(ctx context.Context, arg CreateFamilyParams) (Family, error) {
	row := q.db.QueryRow(ctx, createFamily, arg.Name, arg.CreatedByUserID)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.CreatedByUserID,
	)
	return i, err
}

const deleteFamily = `-- name: DeleteFamily :exec
DELETE FROM families
WHERE id = $1
`

func (q *Queries) DeleteFamily(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteFamily, id)
	return err
}

const getFamilies = `-- name: GetFamilies :many
SELECT id, created_at, updated_at, name, created_by_user_id FROM families
`

func (q *Queries) GetFamilies(ctx context.Context) ([]Family, error) {
	rows, err := q.db.Query(ctx, getFamilies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Family
	for rows.Next() {
		var i Family
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.CreatedByUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFamily = `-- name: GetFamily :one
SELECT id, created_at, updated_at, name, created_by_user_id FROM families
WHERE id = $1
`

func (q *Queries) GetFamily(ctx context.Context, id pgtype.UUID) (Family, error) {
	row := q.db.QueryRow(ctx, getFamily, id)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.CreatedByUserID,
	)
	return i, err
}

const getFamilyByUserID = `-- name: GetFamilyByUserID :one
SELECT id, created_at, updated_at, name, created_by_user_id FROM families 
WHERE created_by_user_id = $1
`

func (q *Queries) GetFamilyByUserID(ctx context.Context, createdByUserID pgtype.UUID) (Family, error) {
	row := q.db.QueryRow(ctx, getFamilyByUserID, createdByUserID)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.CreatedByUserID,
	)
	return i, err
}

const updateFamily = `-- name: UpdateFamily :one
UPDATE families SET
    updated_at = NOW(),
    name = $2
WHERE id = $1
RETURNING id, created_at, updated_at, name, created_by_user_id
`

type UpdateFamilyParams struct {
	ID   pgtype.UUID
	Name string
}

func (q *Queries) UpdateFamily(ctx context.Context, arg UpdateFamilyParams) (Family, error) {
	row := q.db.QueryRow(ctx, updateFamily, arg.ID, arg.Name)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.CreatedByUserID,
	)
	return i, err
}
